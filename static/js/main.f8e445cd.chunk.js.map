{"version":3,"sources":["App.tsx","reportWebVitals.ts","index.tsx"],"names":["App","ref","React","useRef","useEffect","camera","THREE","window","innerWidth","innerHeight","position","z","scene","geometry","material","mesh","add","renderer","antialias","setSize","setAnimationLoop","time","rotation","x","y","render","current","appendChild","domElement","react_default","a","createElement","reportWebVitals","onPerfEntry","Function","__webpack_require__","e","then","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","src_App","document","getElementById"],"mappings":"wKAiCeA,MA9Bf,WACE,IAAMC,EAAMC,IAAMC,SA0BlB,OAxBAD,IAAME,UAAU,WACd,IAAMC,EAAS,IAAIC,IAAwB,GAAIC,OAAOC,WAAaD,OAAOE,YAAa,IAAM,IAC7FJ,EAAOK,SAASC,EAAI,EACpB,IAAMC,EAAQ,IAAIN,IAEZO,EAAW,IAAIP,IAAkB,GAAK,GAAK,IAC3CQ,EAAW,IAAIR,IAEfS,EAAO,IAAIT,IAAWO,EAAUC,GACtCF,EAAMI,IAAID,GAEV,IAAME,EAAW,IAAIX,IAAoB,CAAEY,WAAW,IAOtDD,EAASE,QAAQZ,OAAOC,WAAYD,OAAOE,aAC3CQ,EAASG,iBAPS,SAACC,GACjBN,EAAKO,SAASC,EAAIF,EAAO,IACzBN,EAAKO,SAASE,EAAIH,EAAO,IAEzBJ,EAASQ,OAAOb,EAAOP,KAKzBJ,EAAIyB,QAAQC,YAAYV,EAASW,aAChC,IAEIC,EAAAC,EAAAC,cAAA,OAAK9B,IAAKA,KChBJ+B,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxCC,EAAAC,EAAA,GAAAC,KAAAF,EAAAG,KAAA,UAAqBD,KAAK,SAAAE,GAAiD,IAA9CC,EAA8CD,EAA9CC,OAAQC,EAAsCF,EAAtCE,OAAQC,EAA8BH,EAA9BG,OAAQC,EAAsBJ,EAAtBI,OAAQC,EAAcL,EAAdK,QAC3DJ,EAAOP,GACPQ,EAAOR,GACPS,EAAOT,GACPU,EAAOV,GACPW,EAAQX,MCHdY,IAASpB,OACPI,EAAAC,EAAAC,cAACF,EAAAC,EAAMgB,WAAP,KACEjB,EAAAC,EAAAC,cAACgB,EAAD,OAEFC,SAASC,eAAe,SAM1BjB","file":"static/js/main.f8e445cd.chunk.js","sourcesContent":["import React from 'react'\nimport * as THREE from 'three'\n\nfunction App() {\n  const ref = React.useRef<any>()\n\n  React.useEffect(() => {\n    const camera = new THREE.PerspectiveCamera(70, window.innerWidth / window.innerHeight, 0.01, 10)\n    camera.position.z = 1\n    const scene = new THREE.Scene()\n\n    const geometry = new THREE.BoxGeometry(0.2, 0.2, 0.2)\n    const material = new THREE.MeshNormalMaterial()\n\n    const mesh = new THREE.Mesh(geometry, material)\n    scene.add(mesh)\n\n    const renderer = new THREE.WebGLRenderer({ antialias: true })\n    const animation = (time: number) => {\n      mesh.rotation.x = time / 2000\n      mesh.rotation.y = time / 1000\n\n      renderer.render(scene, camera)\n    }\n    renderer.setSize(window.innerWidth, window.innerHeight)\n    renderer.setAnimationLoop(animation)\n\n    ref.current.appendChild(renderer.domElement)\n  }, [])\n\n  return <div ref={ref}></div>\n}\n\nexport default App\n","import { ReportHandler } from 'web-vitals'\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry)\n      getFID(onPerfEntry)\n      getFCP(onPerfEntry)\n      getLCP(onPerfEntry)\n      getTTFB(onPerfEntry)\n    })\n  }\n}\n\nexport default reportWebVitals\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './styles/index.css'\nimport App from './App'\nimport reportWebVitals from './reportWebVitals'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}